#!/bin/bash
set -euo pipefail

export LANG=C

app_name=${0##*/}
arch=$(uname -m)
pkg_list=""
run_cmd=""
quiet="n"
pacman_conf="/etc/pacman.conf"
export iso_label="ANTERGOS$(date +%Y%m)"
iso_publisher="Antergos <https://www.antergos.com>"
iso_application="Antergos Live/Rescue CD"
install_dir="arch"
work_dir="work"
out_dir="out"
keep_pacman_packages="n"
sfs_mode="sfs"
sfs_comp="xz"

# Root filesystem of our ISO image will be created here
rootfs=${work_dir}/root-image

# Show an INFO message
# $1: message string
_msg_info() {
    local _msg="${1}"
    echo "[mkarchiso] INFO: ${_msg}"
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
_msg_error() {
    local _msg="${1}"
    local _error=${2}
    echo
    echo "[mkarchiso] ERROR: ${_msg}"
    echo
    if [[ ${_error} -gt 0 ]]; then
        exit ${_error}
    fi
}

# Show space usage similar to df, but better formatted.
# $1: mount-point or mounted device.
_show_space_usage () {
    local _where="${1}"
    local _fs _total _used _avail _pct_u=0 _mnt
    read _fs _total _used _avail _pct_u _mnt < <(df -m "${_where}" | tail -1) &> /dev/null
    _msg_info "Total: ${_total} MiB (100%) | Used: ${_used} MiB (${_pct_u}) | Avail: ${_avail} MiB ($((100 - ${_pct_u%\%}))%)"
}

_chroot_init() {
     if [[ -f "${work_dir}/mkarchiso.init" ]]; then
         _msg_info "Initial environment already installed, skipping."
     else
        mkdir -p ${rootfs}
        minimal=${1:-}
        if [[ "$minimal" == "minimal" ]]; then
            #_pacman "bash coreutils cryptsetup e2fsprogs device-mapper filesystem linux pacman sed syslinux antergos-keyring antergos-mirrorlist"
            _pacman "base syslinux antergos-keyring antergos-mirrorlist"
            #rm -rf "${rootfs}/usr/share/man/*"
        else
            _pacman "base syslinux antergos-keyring antergos-mirrorlist"
        fi
        : > "${work_dir}/mkarchiso.init"
     fi
}

_chroot_run() {
    eval arch-chroot ${rootfs} "${run_cmd}"
}

_mount_rootfs() {
    trap "_umount_rootfs" EXIT HUP INT TERM
    mkdir -p "${work_dir}/mnt/root-image"
    _msg_info "Mounting '${work_dir}/root-image.img' on '${work_dir}/mnt/root-image'"
    mount "${work_dir}/root-image.img" "${work_dir}/mnt/root-image"
    _msg_info "Done!"
}

_umount_rootfs() {
    _msg_info "Unmounting '${work_dir}/mnt/root-image'"
    umount -d "${work_dir}/mnt/root-image"
    _msg_info "Done!"
    rmdir "${work_dir}/mnt/root-image"
    trap - EXIT HUP INT TERM
}

# Mount a filesystem (trap signals in case of error for unmounting it
# $1: source image
# $2: mount-point
_mount_fs() {
    local _src="${1}"
    local _dst="${2}"
    trap "_umount_fs ${_src}" EXIT HUP INT TERM
    mkdir -p "${_dst}"
    _msg_info "Mounting '${_src}' on '${_dst}'"
    mount "${_src}" "${_dst}"
    _show_space_usage "${_dst}"
}

# Unmount a filesystem (and untrap signals)
# $1: mount-point or device/image
_umount_fs() {
    local _dst="${1}"
    _show_space_usage "${_dst}"
    _msg_info "Unmounting '${_dst}'"
    umount -fl "${_dst}"
    rmdir "${_dst}"
    trap - EXIT HUP INT TERM
}

# Compare if a file/directory (source) is newer than other file (target)
# $1: source file/directory
# $2: target file
# return: 0 if target does not exists or if target is older than source.
#         1 if target is newer than source
_is_directory_changed() {
    local _src="${1}"
    local _dst="${2}"

    if [ -e "${_dst}" ]; then
        if [[ $(find ${_src} -newer ${_dst} | wc -l) -gt 0 ]]; then
            _msg_info "Target '${_dst}' is older than '${_src}', updating."
            rm -f "${_dst}"
            return 0
        else
            _msg_info "Target '${_dst}' is up to date with '${_src}', skipping."
            return 1
        fi
    else
        _msg_info "Target '${_dst}' does not exist, making it from '${_src}'"
        return 0
    fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage ()
{
    echo "usage ${app_name} [options] command <command options>"
    echo " general options:"
    echo "    -p PACKAGE(S)    Package(s) to install, can be used multiple times"
    echo "    -r <command>     Run <command> inside root-image"
    echo "    -C <file>        Config file for pacman."
    echo "                     Default: '${pacman_conf}'"
    echo "    -L <label>       Set a label for the disk"
    echo "                     Default: '${iso_label}'"
    echo "    -P <publisher>   Set a publisher for the disk"
    echo "                     Default: '${iso_publisher}'"
    echo "    -A <application> Set an application name for the disk"
    echo "                     Default: '${iso_application}'"
    echo "    -D <install_dir> Set an install_dir. All files will by located here."
    echo "                     Default: '${install_dir}'"
    echo "                     NOTE: Max 8 characters, use only [a-z0-9]"
    echo "    -w <work_dir>    Set the working directory"
    echo "                     Default: '${work_dir}'"
    echo "    -o <out_dir>     Set the output directory"
    echo "                     Default: '${out_dir}'"
    echo "    -s <sfs_mode>    Set SquashFS image mode (img or sfs)"
    echo "                     img: prepare root-image.sfs for dm-snapshot usage"
    echo "                     sfs: prepare root-image.sfs for overlayfs usage"
    echo "                     Default: ${sfs_mode}"
    echo "    -z               Keep pacman cache packages in the iso file"
    echo "    -c <comp_type>   Set SquashFS compression type (gzip, lzma, lzo, xz)"
    echo "                     Default: '${sfs_comp}'"
    echo "    -v               Enable verbose output"
    echo "    -h               This message"
    echo " commands:"
    echo "   init"
    echo "      Make base layout and install base group"
    echo "   install"
    echo "      Install all specified packages (-p)"
    echo "   run"
    echo "      run command specified by -r"
    echo "   prepare"
    echo "      build all images"
    echo "   checksum"
    echo "      make a checksum.md5 for self-test"
    echo "   pkglist"
    echo "      make a pkglist.txt of packages installed on root-image"
    echo "   iso <image name>"
    echo "      build an iso image from the working dir"
    exit ${1}
}

# Shows configuration according to command mode.
# $1: init | install | run | prepare | iso
_show_config () {
    local _mode="$1"
    echo
    _msg_info "Configuration settings"
    _msg_info "                  Command:   ${command_name}"
    _msg_info "             Architecture:   ${arch}"
    _msg_info "        Working directory:   ${work_dir}"
    _msg_info "   Installation directory:   ${install_dir}"
    case "${_mode}" in
        init)
            _msg_info "       Pacman config file:   ${pacman_conf}"
            ;;
        install)
            _msg_info "       Pacman config file:   ${pacman_conf}"
            _msg_info "                 Packages:   ${pkg_list}"
            ;;
        run)
            _msg_info "              Run command:   ${run_cmd}"
            ;;
        prepare)
            ;;
        checksum)
            ;;
        pkglist)
            ;;
        iso)
            _msg_info "               Image name:   ${img_name}"
            _msg_info "               Disk label:   ${iso_label}"
            _msg_info "           Disk publisher:   ${iso_publisher}"
            _msg_info "         Disk application:   ${iso_application}"
            ;;
    esac
    echo
}

# Install desired packages to root-image
_pacman ()
{
    _msg_info "Installing packages to '${rootfs}/'..."
    if [[ ${keep_pacman_packages} = "y" ]]; then
        if [[ "${quiet}" = "y" ]]; then
            pacstrap -C "${pacman_conf}" -d -G -M "${rootfs}" --force $* &> /dev/null
        else
            pacstrap -C "${pacman_conf}" -d -G -M "${rootfs}" --force $*
        fi
    else
        if [[ "${quiet}" = "y" ]]; then
            pacstrap -C "${pacman_conf}" -c -d -G -M "${rootfs}" --force $* &> /dev/null
        else
            pacstrap -C "${pacman_conf}" -c -d -G -M "${rootfs}" --force $*
        fi
    fi
    _msg_info "Packages installed successfully!"
}

# Cleanup root-image
_cleanup () {
    _msg_info "Cleaning up what we can on root-image..."

    # Delete initcpio image(s)
    if [[ -d "${rootfs}/boot" ]]; then
        find "${rootfs}/boot" -type f -name '*.img' -delete
    fi
    # Delete kernel(s)
    if [[ -d "${rootfs}/boot" ]]; then
        find "${rootfs}/boot" -type f -name 'vmlinuz*' -delete
    fi
    # Delete pacman database sync cache files (*.tar.gz)
    if [[ -d "${rootfs}/var/lib/pacman" ]]; then
        find "${rootfs}/var/lib/pacman" -maxdepth 1 -type f -delete
    fi
    # Delete pacman database sync cache
    if [[ -d "${rootfs}/var/lib/pacman/sync" ]]; then
        find "${rootfs}/var/lib/pacman/sync" -delete
    fi

    if [[ ${keep_pacman_packages} == "y" ]]; then
        _msg_info ">>> Keeping pacman package cache <<<"
    else
        _msg_info ">>> Delete pacman package cache <<<"
        find "${rootfs}/var/cache/pacman/pkg" -type f -delete
    fi

    # Delete all log files, keeps empty dirs.
    if [[ -d "${rootfs}/var/log" ]]; then
        find "${rootfs}/var/log" -type f -delete
    fi
    # Avoid journald use permanent storage (Storage=auto)
    if [[ -d "${rootfs}/var/log/journal" ]]; then
       rm -rf "${rootfs}/var/log/journal"
    fi
    # Delete all temporary files and dirs
    if [[ -d "${rootfs}/var/tmp" ]]; then
        find "${rootfs}/var/tmp" -mindepth 1 -delete
    fi
    # Delete package pacman related files.
    find "${work_dir}" \( -name "*.pacnew" -o -name "*.pacsave" -o -name "*.pacorig" \) -delete

    rm -rf ${rootfs}/usr/share/{doc,gtk-doc,info,gtk-2.0,gtk-3.0}

    _msg_info "Done!"
}


# Makes an ext4 filesystem inside a SquashFS from a source directory.
_mkrootfs_img () {
    if [[ ! -e "${rootfs}" ]]; then
        _msg_error "The path '${rootfs}' does not exist" 1
    fi

    _msg_info "Creating ext4 image of 8GiB..."
    truncate -s 8G "${work_dir}/root-image.img"
    local _qflag=""
    if [[ ${quiet} == "y" ]]; then
        _qflag="-q"
    fi
    mkfs.ext4 ${_qflag} -O ^has_journal,^resize_inode -E lazy_itable_init=0 -m 0 -F "${work_dir}/root-image.img"
    tune2fs -c 0 -i 0 "${work_dir}/root-image.img" &> /dev/null
    _msg_info "Done!"
    _mount_rootfs
    _msg_info "Copying '${rootfs}/' to '${work_dir}/mnt/root-image/'..."
    cp -aT "${rootfs}/" "${work_dir}/mnt/root-image/"
    _msg_info "Done!"
    _umount_rootfs
    mkdir -p "${work_dir}/iso/${install_dir}"
    _msg_info "Creating SquashFS image, this may take some time..."
    if [[ "${quiet}" = "y" ]]; then
        mksquashfs "${work_dir}/root-image.img" "${work_dir}/iso/${install_dir}/root-image.sfs" -noappend -comp "${sfs_comp}" -no-progress &> /dev/null
    else
        mksquashfs "${work_dir}/root-image.img" "${work_dir}/iso/${install_dir}/root-image.sfs" -noappend -comp "${sfs_comp}" -no-progress
    fi
    _msg_info "Done!"
    rm ${work_dir}/root-image.img
}

# Makes a SquashFS filesystem from a source directory.
_mkrootfs_sfs () {
    if [[ ! -e "${rootfs}" ]]; then
        _msg_error "The path '${rootfs}' does not exist" 1
    fi
    _extra_arg="${1:-default}"

    mkdir -p "${work_dir}/iso/${install_dir}"

    if false && [[ ${_extra_arg} != minimal ]]; then
        # Squash an empty directory into a filesystem image for live usb persistance
        truncate -s 250M "${work_dir}/persistent_root-image.img"
        mkfs.ext4 -O ^has_journal,^resize_inode -L ANT_OVRLY -E lazy_itable_init=0 -m 0 -F "${work_dir}/persistent_root-image.img"
        tune2fs -c 0 -i 0 "${work_dir}/persistent_root-image.img" &> /dev/null
        # mksquashfs "${work_dir}/persistent_root-image.img" "${work_dir}/iso/${install_dir}/persistent_root-image.sfs" -noappend -comp "${sfs_comp}" -no-progress
        cp "${work_dir}/persistent_root-image.img" "${work_dir}/iso/${install_dir}"
    fi

    # https://github.com/Antergos/antergos-iso/pull/39/
    _rootimg="${rootfs}"
    touch -r "${_rootimg}/usr" "${_rootimg}/etc/.updated" "${_rootimg}/var/.updated"

    _msg_info "Creating SquashFS image, this may take some time..."
    if [[ "${quiet}" = "y" ]]; then
        mksquashfs "${rootfs}" "${work_dir}/iso/${install_dir}/root-image.sfs" -noappend -comp "${sfs_comp}" -no-progress &> /dev/null
    else
        mksquashfs "${rootfs}" "${work_dir}/iso/${install_dir}/root-image.sfs" -noappend -comp "${sfs_comp}" -no-progress
    fi
    _msg_info "Done!"
}

_mkchecksum () {
    _msg_info "Creating checksum file for self-test..."
    cd "${work_dir}/iso/${install_dir}"
    md5sum root-image.sfs > root-image.md5
    cd ${OLDPWD}
    _msg_info "Done!"
}

command_checksum () {
    _show_config checksum

    local _chk_arch

    for _chk_arch in i686 x86_64; do
        if _is_directory_changed "${work_dir}/iso/${install_dir}" "${work_dir}/iso/${install_dir}/checksum.${_chk_arch}.md5"; then
            _msg_info "Creating checksum file for self-test (${_chk_arch})..."
            cd "${work_dir}/iso/${install_dir}"
            if [[ -d "${_chk_arch}" ]]; then
                md5sum aitab > checksum.${_chk_arch}.md5
                find ${_chk_arch} -type f -print0 | xargs -0 md5sum >> checksum.${_chk_arch}.md5
                if [[ -d "any" ]]; then
                    find any -type f -print0 | xargs -0 md5sum >> checksum.${_chk_arch}.md5
                fi
            fi
            cd ${OLDPWD}
            _msg_info "Done!"
        fi
    done
}

command_pkglist () {
    _show_config pkglist

    _msg_info "Creating a list of installed packages on live-environment..."
    pacman -Sl -r "${rootfs}" --config "${pacman_conf}" | \
        awk '/\[installed\]$/ {print $1 "/" $2 "-" $3}' > \
        "${work_dir}/iso/${install_dir}/pkglist.${arch}.txt"
    _msg_info "Done!"

}

# Create an ISO9660 filesystem from "iso" directory.
command_iso () {
    local _iso_efi_boot_args=""

    if [[ ! -f "${work_dir}/iso/isolinux/isolinux.bin" ]]; then
         _msg_error "The file '${work_dir}/iso/isolinux/isolinux.bin' does not exist." 1
    fi
    if [[ ! -f "${work_dir}/iso/isolinux/isohdpfx.bin" ]]; then
         _msg_error "The file '${work_dir}/iso/isolinux/isohdpfx.bin' does not exist." 1
    fi

    # If exists, add an EFI "El Torito" boot image (FAT filesystem) to ISO-9660 image.
    if [[ -f "${work_dir}/iso/EFI/archiso/efiboot.img" ]]; then
        _iso_efi_boot_args="-eltorito-alt-boot
                            -e EFI/archiso/efiboot.img
                            -no-emul-boot
                            -isohybrid-gpt-basdat"
    fi
    _extra_arg="${1:-default}"
    if false && [[ ${_extra_arg} != minimal ]]; then
        _persistence="-append_partition 3 Linux ${work_dir}/iso/${install_dir}/persistent_root-image.img"
    else
        _persistence=''
    fi

    _show_config iso

    mkdir -p ${out_dir}
    _msg_info "Creating ISO image..."
    local _qflag=""
    if [[ ${quiet} == "y" ]]; then
        _qflag="-quiet"
    fi
    xorriso -as mkisofs ${_qflag} \
        -iso-level 3 \
        -full-iso9660-filenames \
        -volid "${iso_label}" \
        -appid "${iso_application}" \
        -publisher "${iso_publisher}" \
        -preparer "prepared by mkarchiso" \
        -eltorito-boot isolinux/isolinux.bin \
        -eltorito-catalog isolinux/boot.cat \
        -no-emul-boot -boot-load-size 4 -boot-info-table \
        ${_persistence} \
        -isohybrid-mbr ${work_dir}/iso/isolinux/isohdpfx.bin \
        ${_iso_efi_boot_args} \
        -output "${out_dir}/${img_name}" \
        "${work_dir}/iso/"
    _msg_info "Done! | $(ls -sh ${out_dir}/${img_name})"

}

# create root-image.sfs filesystem, and push it in "iso" directory.
command_prepare () {
    _show_config prepare
    _cleanup
    if [[ ${sfs_mode} = "sfs" ]]; then
        _mkrootfs_sfs
    else
        _mkrootfs_img
    fi
    _mkchecksum
}

# Install packages on root-image.
# A basic check to avoid double execution/reinstallation is done via hashing package names.
command_install () {
    if [[ ! -f "${pacman_conf}" ]]; then
        _msg_error "Pacman config file '${pacman_conf}' does not exist" 1
    fi

    #trim spaces
    pkg_list="$(echo ${pkg_list})"

    if [[ -z ${pkg_list} ]]; then
        _msg_error "Packages must be specified" 0
        _usage 1
    fi

    _show_config install

    _pacman "--needed ${pkg_list}"
}

command_init() {
    _show_config init
    _chroot_init "$@"
}

command_run() {
    _show_config run
    _chroot_run
}

if [[ ${EUID} -ne 0 ]]; then
    _msg_error "This script must be run as root." 1
fi

while getopts 'p:r:C:L:P:A:D:w:o:s:c:vhz' arg; do
    case "${arg}" in
        p) pkg_list="${pkg_list} ${OPTARG}" ;;
        r) run_cmd="${OPTARG}" ;;
        C) pacman_conf="${OPTARG}" ;;
        z) keep_pacman_packages="y" ;;
        L) iso_label="${OPTARG}" ;;
        P) iso_publisher="${OPTARG}" ;;
        A) iso_application="${OPTARG}" ;;
        D) install_dir="${OPTARG}" ;;
        w) work_dir="${OPTARG}" ;;
        o) out_dir="${OPTARG}" ;;
        s) sfs_mode="${OPTARG}" ;;
        c) sfs_comp="${OPTARG}" ;;
        v) quiet="n" ;;
        h|?) _usage 0 ;;
        *)
            _msg_error "Invalid argument '${arg}'" 0
            _usage 1
            ;;
    esac
done

shift $((OPTIND - 1))

if [[ $# -lt 1 ]]; then
    _msg_error "No command specified" 0
    _usage 1
fi
command_name="${1}"
_extra_arg="${2:-default}"
_extra_arg2="${3:-}"

case "${command_name}" in
    init)
        command_init
        ;;
    init-minimal)
        command_init minimal
        ;;
    install)
        command_install
        ;;
    run)
        command_run
        ;;
    prepare)
        command_prepare ${_extra_arg}
        ;;
    checksum)
        command_checksum
        ;;
    pkglist)
        command_pkglist
        ;;
    iso)
        if [[ $# -lt 2 ]]; then
            _msg_error "No image specified" 0
            _usage 1
        fi
        img_name="${2}"
        command_iso ${_extra_arg2}
        ;;
    *)
        _msg_error "Invalid command name '${command_name}'" 0
        _usage 1
        ;;
esac
