#!/usr/bin/env bash

# Generate a minimal filesystem for antergos and load it into the local
# docker as "antergos-base"
# requires root
set -e

hash pacstrap &>/dev/null || {
	echo "Could not find pacstrap. Run pacman -S arch-install-scripts"
	exit 1
}

hash expect &>/dev/null || {
	echo "Could not find expect. Run pacman -S expect"
	exit 1
}


export LANG="C.UTF-8"

ROOTFS=$(mktemp -d ${TMPDIR:-/var/tmp}/rootfs-antergos-XXXXXXXXXX)
chmod 755 ${ROOTFS}

# packages to ignore for space savings
PKGIGNORE=(
    cryptsetup
    device-mapper
    dhcpcd
    iproute2
    jfsutils
    linux
    lvm2
    man-db
    man-pages
    mdadm
    netctl
    openresolv
    pciutils
    pcmciautils
    reiserfsprogs
    s-nail
    systemd-sysvcompat
    usbutils
    vi
    xfsprogs
)
IFS=','
PKGIGNORE="${PKGIGNORE[*]}"
unset IFS

PACMAN_CONF="mkimage-antergos-pacman.conf"

#export PACMAN_LOCAL_MIRROR="Server = http://192.168.1.178:8080/mirror/archlinux/\$repo/os/\$arch"
export PACMAN_LOCAL_MIRROR=""
export PACMAN_MIRROR="Server = https://mirrors.kernel.org/archlinux/\$repo/os/\$arch"

#export ANTERGOS_LOCAL_MIRROR="Server = http://192.168.1.178:8080/mirror/antergos/\$repo/\$arch"
export ANTERGOS_LOCAL_MIRROR=""
export ANTERGOS_MIRROR="Server = http://repo.antergos.info/\$repo/\$arch"

EXTRA_PKGS="haveged antergos-keyring unzip"
EXPECT_TIMEOUT=60
ARCH_KEYRING="archlinux"
ANTERGOS_KEYRING="antergos"
DOCKER_IMAGE_NAME="antergos-base"


expect <<EOF
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- \$arg
    }
    set timeout ${EXPECT_TIMEOUT}

    spawn pacstrap -C ${PACMAN_CONF} -c -d -i -M ${ROOTFS} base ${EXTRA_PKGS} --ignore ${PKGIGNORE}
    expect {
        -exact "anyway? \[Y/n\] " { send -- "n\r"; exp_continue }
        -exact "(default=all): " { send -- "\r"; exp_continue }
        -exact "installation? \[Y/n\]" { send -- "y\r"; exp_continue }
        -exact "delete it? \[Y/n\]" { send -- "y\r"; exp_continue }
    }
EOF

arch-chroot ${ROOTFS} /bin/sh -c 'rm -r /usr/share/man/*'
arch-chroot ${ROOTFS} /bin/sh -c "haveged -w 1024; pacman-key --init; pkill haveged; pacman -Rs --noconfirm haveged; pacman-key --populate ${ARCH_KEYRING} ${ANTERGOS_KEYRING}; pkill gpg-agent"
arch-chroot ${ROOTFS} /bin/sh -c "ln -s /usr/share/zoneinfo/UTC /etc/localtime"
echo 'en_US.UTF-8 UTF-8' > ${ROOTFS}/etc/locale.gen
arch-chroot ${ROOTFS} locale-gen

if [ "${PACMAN_LOCAL_MIRROR}" != "" ]; then
    arch-chroot ${ROOTFS} /bin/sh -c 'echo ${PACMAN_LOCAL_MIRROR} > /etc/pacman.d/mirrorlist'
fi

arch-chroot ${ROOTFS} /bin/sh -c 'echo ${PACMAN_MIRROR} >> /etc/pacman.d/mirrorlist'

if [ "${ANTERGOS_LOCAL_MIRROR}" != "" ]; then
    arch-chroot ${ROOTFS} /bin/sh -c 'echo ${ANTERGOS_LOCAL_MIRROR} > /etc/pacman.d/antergos-mirrorlist'
fi

arch-chroot ${ROOTFS} /bin/sh -c 'echo ${ANTERGOS_MIRROR} >> /etc/pacman.d/antergos-mirrorlist'

# Overwrite pacman.conf
cp ${PACMAN_CONF} ${ROOTFS}/etc/pacman.conf

# Create .bashrc
echo "alias ls=\"ls --color\"" > ${ROOTFS}/root/.bashrc

# udev doesn't work in containers, rebuild /dev
DEV=${ROOTFS}/dev
rm -rf $DEV
mkdir -p $DEV
mknod -m 666 $DEV/null c 1 3
mknod -m 666 $DEV/zero c 1 5
mknod -m 666 $DEV/random c 1 8
mknod -m 666 $DEV/urandom c 1 9
mkdir -m 755 $DEV/pts
mkdir -m 1777 $DEV/shm
mknod -m 666 $DEV/tty c 5 0
mknod -m 600 $DEV/console c 5 1
mknod -m 666 $DEV/tty0 c 4 0
mknod -m 666 $DEV/full c 1 7
mknod -m 600 $DEV/initctl p
mknod -m 666 $DEV/ptmx c 5 2
ln -sf /proc/self/fd $DEV/fd

tar --numeric-owner --xattrs --acls -C ${ROOTFS} -c . | docker import - ${DOCKER_IMAGE_NAME}

echo "Testing image..."
docker run --rm -t ${DOCKER_IMAGE_NAME} echo Success.

rm -rf ${ROOTFS}
